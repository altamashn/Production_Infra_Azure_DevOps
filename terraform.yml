trigger:
  branches:
    exclude:
      - main
    include:
      - feature/*

pr:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: 'Backend-Details'

stages:
  - stage: Validate
    displayName: 'Terraform Validation - Feature Branch'
    condition: and(succeeded(),ne(variables['Build.SourceBranchName'], 'main'))
    jobs:
      - job: 'ValidateJob' 
        displayName: 'Run Terraform Validate & Plan'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Terraform Install latest version'
            inputs:
              terraformVersion: 'latest'

          
          - task: TerraformTask@5
            displayName: 'Terraform Initialize'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Infrastructure'
              backendServiceArm: 'Terraform-DevOps'
              backendAzureRmResourceGroupName: '$(resource_group_name)'
              backendAzureRmStorageAccountName: '$(storage_account_name)'
              backendAzureRmContainerName: '$(container_name)'
              backendAzureRmKey: '$(key)'
              backendAzureRmUseEntraIdForAuthentication: false
              
          - task: TerraformTask@5
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Infrastructure'
          - task: TerraformTask@5
            displayName: 'Terraform Format'
            inputs:
              provider: 'azurerm'
              command: 'custom'
              outputTo: 'console'
              customCommand: 'fmt'
              environmentServiceNameAzureRM: 'Terraform-DevOps'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Infrastructure'
          - task: TerraformTask@5
            displayName: 'Terraform Show'
            inputs:
              provider: 'azurerm'
              command: 'show'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Infrastructure'
              outputTo: 'file'
              outputFormat: 'default'
              fileName: 'terraform-plan'
              environmentServiceNameAzureRM: 'Terraform-DevOps'
          - task: TerraformTask@5
            displayName: 'Terraform Plan - Feature Branch'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Infrastructure'
              environmentServiceNameAzureRM: 'Terraform-DevOps'

          - task: ArchiveFiles@2
            displayName: 'Archive FIles'
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: Deploy
    displayName: 'Terraform Apply - Main Branch'
    condition: eq(variables['Build.SourceBranchName'], 'refs/heads/main')
    jobs:
      - job: ApplyJob
        displayName: 'Run Terraform Apply'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Terraform latest version Install'
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTask@5
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Infrastructure'
              backendServiceArm: 'Terraform-DevOps'
              backendAzureRmResourceGroupName: '$(resource_group_name)'
              backendAzureRmStorageAccountName: '$(storage_account_name)'
              backendAzureRmContainerName: '$(container_name)'
              backendAzureRmKey: '$(key)'
              backendAzureRmUseEntraIdForAuthentication: false
          - task: TerraformTask@5
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Infrastructure'
          - task: ExtractFiles@1
            displayName: 'Extracting Files'
            inputs:
              archiveFilePatterns: '**/*.zip'
              destinationFolder: '$(System.DefaultWorkingDirectory)/Infrastructure'
              cleanDestinationFolder: true
              overwriteExistingFiles: false
          - task: TerraformTask@5
            displayName: 'Terraform Apply (Main Branch)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Infrastructure'
              environmentServiceNameAzureRM: 'Terraform-DevOps'